#!/usr/bin/env python

"""
Converts txt file to csv file.
Uses py2 for backwards compatibility,
with some py3 features like print()
"""

from __future__ import print_function
import argparse
import csv
import io
import os
import re
import sys

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("path", help="Path to .txt file")
    parser.add_argument("-n", "--numbered", type=int,
                        help="Indicate whether items are numbered and which line is numbered")
    parser.add_argument("-x", "--exclude", type=int, nargs="*",
                        help="Specify which line(s) to exclude")
    parser.add_argument("-o", "--output", type=str,
                        help="Specifiy output path")
    parser.add_argument("-t", "--keep-together", type=int, nargs="*",
                        help="Specify which lines should be kept together")

    args = parser.parse_args()
    input_path = args.path
    numbered_line = args.numbered
    lines_to_exclude = args.exclude
    output_path = args.output
    keep_together = args.keep_together

    # Input check
    if not os.path.exists(input_path):
        print("{} doesn't exist. Any typo?".format(input_path))
        sys.exit(1)

    # Output check
    if not output_path:
        output_path = os.path.splitext(input_path)[0] + ".csv"
    elif os.path.splitext(output_path)[1] != ".csv":
        print("Output path must end in .csv")
        sys.exit(1)

    # I/O ok, let's do some work
    with io.open(input_path, mode="r", encoding="utf-8-sig") as txt_file:
        input_text =  txt_file.read().strip()

    items = turn_to_list(input_text)

    # Make sure user isn't asking to exclude lines beyond shortest chunk
    if lines_to_exclude and max(lines_to_exclude) > find_shortest(items):
        print("Excluded lines out of range: {} is the shortest chunk size".format(shortest_chunk))
        sys.exit(1)

    # Separate inline numbering if user asks for it
    if numbered_line:
        items = separate_numbered(items, numbered_line)

    # Keep listed lines together in one cell
    if keep_together:
        items = combine_lines(items, keep_together)

    # Exclude lines specified by user
    if lines_to_exclude:
        items = exclude_lines(items, lines_to_exclude)

    # All done processing, write to file
    write_csv(items, output_path)


def find_shortest(items_list):
    """ Find shortest chunk length
    """
    shortest = len(items_list[0])
    for item in items_list:
        if len(item) < shortest:
            shortest = len(item)
    return shortest
        

def turn_to_list(input_str):
    """ Clean up input string and returns a list of lists:
    [[id #, 12 Name, location], [id#, 13 Name, location]]
    """
    chunks = re.sub("\n\s*\n", "\n\n", input_str)
    chunks = chunks.split("\n\n")
    return [chunk.splitlines() for chunk in chunks]


def separate_numbered(chunks, number_line):
    """ Separate inline numbering into its own cell
    [[id #, 12, Name, location], [id#, 13, Name, location]]
    """
    return_chunks = []
    for chunk in chunks:
        new_chunk = []
        for index, item in enumerate(chunk):
            if index != number_line - 1:
                new_chunk.append(item)
            else:
                new_chunk.append(item.split(" ", 1))
        return_chunks.append(new_chunk)
    return return_chunks


def combine_lines(items_list, lines_to_combine):
    """ Combine lines
    [[1, "Name\nlocation\ndonor"], [2, "Name\nlocation\ndonor"]]
    """
    return_list = []
    for chunk in items_list:
        new_chunk = []
        combo_str = ""
        first_str = True
        for index, item in enumerate(chunk):
            if index + 1 in lines_to_combine:
                # If item is a list, it's probably an inline
                # number that's been split, eg: [1, "Calcite"]
                # so keep number in its own cell and combine the rest
                if isinstance(item, list):
                    new_chunk.append(item[0])
                    item = item[1]

                # This is just so we have \n separating each line
                if first_str:
                    combo_str += item
                    first_str = False
                else:
                    combo_str += "\n" + item
            else:
                new_chunk.append(item)
        new_chunk.append(combo_str)
        return_list.append(new_chunk)
    return return_list


def exclude_lines(items_list, exclusion):
    """ Return new list without excluded lines
    """
    return_list = []
    for chunk in items_list:
        new_chunk = [item for i, item in enumerate(chunk)\
                     if i + 1 not in exclusion]
        return_list.append(new_chunk)
    return return_list


def write_csv(items, file_path="./output.csv"):
    """ Flatten & encode items, write CSV file to path
    Items is a list, where each item is a CSV row
    """
    items = [flatten(item) for item in items]
    items = encode_items_utf8(items)

    with open(file_path, mode="wb+") as out_file:
        writer = csv.writer(out_file, dialect="excel")

        for row in items:
            writer.writerow(row)


def encode_items_utf8(items, collection=[]):
    """ Recursively encode every unicode item in an items list
    to UTF-8 bytestring
    """
    return_list = []
    for item in items:
        if isinstance(item, list):
            return_list.append(encode_items_utf8(item))
        else:
            return_list.append(item.encode("utf-8"))
    return return_list


def flatten(items_list):
    """ Recursively flatten & return one list.
    [[1, "Name"], "Location", "Donor"] --> [1, "Name", "Location", "Donor"]
    """
    return_list = []
    for item in items_list:
        if isinstance(item, list):
            return_list += flatten(item)
        else:
            return_list.append(item)
    return return_list


if __name__ == "__main__":
    main()

